name: Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: 'us-east-1'  ## set AWS region
  ECR_REPOSITORY_NGINX: 'nginx-repo'
  ECR_REPOSITORY_FLASK: 'flask-repo'
  ECR_REPOSITORY_BENTO: 'bento-repo'
  ECR_REPOSITORY: 'music_genre_classification'
  VERSION: 'latest'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    ## AWS credentials steps here:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    
    ## Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'false'
    ## Build, tag and push nginx image to ECR
    - name: Build, tag, and push Nginx image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        
        IMAGE_TAG: ${{ env.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG ./nginx
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG

    ## Build, tag and push uwsgi-flask image to ECR
    - name: Build, tag, and push Flask image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FLASK:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FLASK:$IMAGE_TAG

    ## Build, tag and push bento-model image to ECR
    - name: Build, tag, and push Bento image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BENTO:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BENTO:$IMAGE_TAG

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials  ## AWS credentials configuration for this job againg due to paralled Virtual machines of the Github Runners
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setting up SSH key
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create a new directory in EC2 instance
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/ubuntu/deploy"
      
    - name: Transfer deployment script to EC2
      run: |
        scp -i ~/.ssh/id_rsa deploy.sh ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/deploy/deploy.sh

    - name: Copy Docker Compose File to EC2
      run: |
        scp -i ~/.ssh/id_rsa docker-compose-production.yml ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/deploy/docker-compose-production.yml

    - name: Execute deployment script on EC2
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        ECR_REPOSITORY_NGINX: ${{ env.ECR_REPOSITORY_NGINX }}
        ECR_REPOSITORY_FLASK: ${{ env.ECR_REPOSITORY_FLASK }}
        ECR_REPOSITORY_BENTO: ${{ env.ECR_REPOSITORY_BENTO }}
        VERSION: ${{ env.VERSION }}
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_HOST }} "chmod +x /home/ubuntu/deploy/deploy.sh && /home/ubuntu/deploy/deploy.sh $AWS_REGION $ECR_REGISTRY $ECR_REPOSITORY_NGINX $ECR_REPOSITORY_FLASK $ECR_REPOSITORY_BENTO $VERSION"